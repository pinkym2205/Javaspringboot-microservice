name: EKS CI/CD Pipeline

on:
  push:
    branches: [dev, qa, prod]

env:
  CLUSTER_NAME: ct-cluster
  ECR_URI: 634898291786.dkr.ecr.us-east-1.amazonaws.com/ct-ecr
  DEPLOYMENT_NAME: springbootapp
  SERVICE_NAME: springbootapp-service

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setenv.outputs.env }}
    steps:
      - name: Set Environment
        id: setenv
        run: |
          BRANCH=${GITHUB_REF##*/}
          if [[ "$BRANCH" == "dev" ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "qa" ]]; then
            echo "env=qa" >> $GITHUB_OUTPUT
          else
            echo "env=prod" >> $GITHUB_OUTPUT
          fi

  build-test:
    name: Build, Test, Sonar (Parallel)
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: [junit, sonar]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: Build with Maven
        if: matrix.job == 'junit'
        run: mvn clean install

      - name: Run JUnit Tests
        if: matrix.job == 'junit'
        run: mvn test

      - name: Analyze with SonarQube
        if: matrix.job == 'sonar'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=springbootapp \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=$SONAR_TOKEN

  quality-gate:
    name: Check Quality Gate
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Sonar analysis
        run: sleep 30

      - name: Check Sonar Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          STATUS=$(curl -s -u "$SONAR_TOKEN:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=springbootapp" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $STATUS"
          if [[ "$STATUS" != "OK" ]]; then
            aws sns publish --topic-arn "${{ secrets.SNS_TOPIC_ARN }}" --message "‚ùå SonarQube Quality Gate failed for ${{ github.ref_name }} branch." || true
            exit 1
          fi

  docker-build:
    name: Docker Build, Scan, Push
    needs: quality-gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.GITHUB_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URI

      - name: Build Docker image
        run: docker build -t $ECR_URI:${{ github.sha }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $ECR_URI:${{ github.sha }}
          severity: CRITICAL
          format: table
          exit-code: 1

      - name: Push image to ECR
        run: docker push $ECR_URI:${{ github.sha }}

  deploy:
    name: Deploy to EKS
    needs: [setup, docker-build]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: https://console.aws.amazon.com/eks/home
    if: ${{ needs.setup.outputs.environment != 'prod' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.GITHUB_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name $CLUSTER_NAME

      - name: Deploy to ${{ needs.setup.outputs.environment }}
        run: |
          kubectl apply -f k8s/deployment-${{ needs.setup.outputs.environment }}.yaml
          kubectl apply -f k8s/service-${{ needs.setup.outputs.environment }}.yaml
          kubectl set image deployment/springbootapp springboot-container=$ECR_URI:${{ github.sha }} -n ${{ needs.setup.outputs.environment }}

  prod-approval:
    name: Manual Approval for Prod
    if: github.ref_name == 'prod'
    needs: [docker-build]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://console.aws.amazon.com/eks/home
    steps:
      - name: Wait for manual approval
        run: echo "Waiting for manual approval before deploying to production..."
